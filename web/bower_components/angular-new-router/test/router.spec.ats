import {Grammar} from '../src/grammar';
import {RootRouter} from '../src/router';
import {Pipeline} from '../src/pipeline';

describe('RootRouter', () => {
  var router,
      view;

  beforeEach(() => {
    var grammar = new Grammar();
    var pipeline = new Pipeline();
    router = new RootRouter(grammar, pipeline);
  });

  describe('config', () => {
    it('should renavigate after being configured', sync(async () => {
      view = makeMockComponent('root');
      await router.registerViewport(view);
      await router.navigate('/a');
      expect(view.activate).not.toHaveBeenCalled();

      await router.config([
        { path: '/a', component: 'A' }
      ]);
      expect(view.activate).toHaveBeenCalled();
    }));

    it('should allow aliasing', sync(async () => {
      view = makeMockComponent('root');
      await router.config([
        { path: '/a', component: 'A', as: 'B' }
      ]);
      expect(router.generate('B')).toBe('/a');
    }));

    it('should alias configs with no default based on viewport name', sync(async () => {
      await router.config([
        { path: '/a', components: { master: 'A', detail: 'B' } }
      ]);
      expect(router.generate('master:A')).toBe('/a');
      expect(router.generate('detail:B')).toBe('/a');
    }));

    it('should throw it a config uses both "component" and "components"', () => {
      expect(() => {
        router.config([
          { path: '/', component: 'one', components: 'two' }
        ]);
      }).toThrowError('A route config should have either a "component" or "components" property, but not both.');
    });
  });

  describe('when configured', () => {
    beforeEach(sync(async () => {
      view = makeMockComponent('root');
      await router.registerViewport(view);
      await router.config([
        { path: '/a', component: 'A' }
      ]);
    }));

    it('should activate viewports on navigation', sync(async () => {
      await router.navigate('/a');
      expect(view.activate).toHaveBeenCalled();
    }));

    it('should check the canActivate hook to see if it can navigate', sync(async () => {
      var status = await router.navigate('/a');
      expect(status).toBe('/a');
      expect(view.canActivate).toHaveBeenCalled();
    }));

    it('should check the canDeactivate hook to see if it can navigate', sync(async () => {
      view.canDeactivate = jasmine.createSpy('canDeactivate component').and.returnValue(true);
      var status = await router.navigate('/a');
      expect(status).toBe('/a');

      view.canDeactivate = jasmine.createSpy('canDeactivate component').and.returnValue(false);
      view.activate.calls.reset();
      var status = await router.navigate('/a');
      expect(view.activate).not.toHaveBeenCalled();
    }));

    it('should generate URLs', () => {
      expect(router.generate('A', {})).toBe('/a');
    });

    it('should navigate viewports registered after a navigation happens', sync(async () => {
      router = new RootRouter(new Grammar(), new Pipeline());
      view = makeMockComponent('root');
      await router.config([
        { path: '/a', component: 'A' }
      ]);
      await router.navigate('/a');
      expect(view.activate).not.toHaveBeenCalled();

      await router.registerViewport(view);
      expect(view.activate).toHaveBeenCalled();
    }));


    describe('with child routers', () => {
      var child, childView;

      beforeEach(() => {
        child = router.childRouter('A');
        child.config([
          { path: '/b', component: 'B' },
          { path: '/c', component: 'C' }
        ]);
        childView = makeMockComponent('child');
        child.registerViewport(childView);
      });

      it('should check if it can navigate', sync(async () => {
        var status = await router.navigate('/a/b');

        expect(status).toBe('/a/b');
        expect(childView.canActivate).toHaveBeenCalled();
      }));

      it('should activate viewports on navigation', sync(async () => {
        await router.navigate('/a/b');

        expect(view.activate).toHaveBeenCalled();
        expect(childView.activate).toHaveBeenCalled();
      }));

      //TODO: implement pipeline in ES6
      // iit('should deactivate children when navigating away', sync(async () => {
      //   router.config([
      //     { path: '/d', component: 'D' }
      //   ]);

      //   await router.navigate('/a/b');

      //   expect(view.activate).toHaveBeenCalled();
      //   expect(childView.activate).toHaveBeenCalled();

      //   await router.navigate('/d');
      //   expect(childView.deactivate).toHaveBeenCalled();
      // }));

      //TODO: implement pipeline in ES6
      // it('should not activate parent viewports when the matched segment stays the same', sync(async () => {
      //   await router.navigate('/a/b');

      //   expect(view.activate).toHaveBeenCalled();
      //   expect(childView.activate).toHaveBeenCalled();

      //   view.activate.calls.reset();
      //   childView.activate.calls.reset();

      //   await router.navigate('/a/c');

      //   expect(view.activate).not.toHaveBeenCalled();
      //   expect(childView.activate).toHaveBeenCalled();
      // }));

      it('should not activate viewports if a predicate rejects', sync(async () => {
        childView.canActivate = () => Promise.reject();
        await router.navigate('/a/b');

        expect(view.activate).not.toHaveBeenCalled();
        expect(childView.activate).not.toHaveBeenCalled();
      }));

      it('should generate URLs', sync(async () => {
        expect(child.generate('C')).toBe('/a/c');
        expect(router.generate('C')).toBe('/a/c');
      }));

      it('should generate URLs with params', sync(async () => {
        await child.config({ path: '/d/:param', component: 'D'});
        expect(child.generate('D', {param: 'foo'})).toBe('/a/d/foo');
        expect(router.generate('D', {param: 'foo'})).toBe('/a/d/foo');
      }));

      // TODO: test recursive routes
    });

    describe('with sibbling routers', () => {
      var left, right;

      beforeEach(sync(async () => {
        left = router.childRouter('A');
        right = router.childRouter('A');
      }));

      it('should work', sync(async() => {
        await left.config({ path: '/left', component: 'L' });
        await right.config({ path: '/right', component: 'R' });
      }));

      it('should throw if children cannot agree on a cannonical URL', sync(async() => {
        expect(() => {
          left.config([
            { path: '/b', redirectTo: '/one' },
            { path: '/one', component: 'C' }
          ]);
          right.config([
            { path: '/b', redirectTo: '/other' },
            { path: '/other', component: 'C' }
          ]);
        }).toThrowError('"/b" already maps to "/one"');
      }));

    });
  });
});

function sync (fn) {
  return async (done) => {
    try {
      await fn();
    } catch (e) {
      expect(e.stack).toBe('');
    } finally {
      done();
    }
  }
}

function makeMockComponent (name = '') {
  return {
    instantiate: () => {},
    load: () => {},
    activate: jasmine.createSpy(name + ' activate component').and.returnValue(Promise.resolve()),
    deactivate: jasmine.createSpy(name + ' deactivate component').and.returnValue(Promise.resolve()),
    canActivate: jasmine.createSpy(name + ' canActivate component').and.returnValue(Promise.resolve()),
    canDeactivate: jasmine.createSpy(name + ' canDeactivate component').and.returnValue(Promise.resolve())
  };
}
